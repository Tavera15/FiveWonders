@model FiveWonders.core.Models.CustomOptionList

<style>
    custom-list-page button {
        font-size: 1.5em;
        color: #53BDFF;
        background-color: #fff;
        outline: 0;
        border: none;
    }

    custom-list-page .tasksBoard {
        background-color: #fff;
        margin-top: 20px;
        padding-top: 10px;
        padding-bottom: 10px;
        padding-right: 40px;
        /*display: none;*/
    }


    #custom-list-page li {
        border-bottom: 1px solid #53BDFF;
        padding-bottom: 15px;
        padding-top: 15px;
        font-size: 1.3em;
        color: #2f4f4f;
    }
</style>

<div class="col-lg-12" style="margin-top: 4vh;" id="custom-list-page">
    <div class="col-lg-4" style="border: solid 1px black;">
        <h3 style="text-align: center;">Items in list</h3>
        <div class="form-group col-lg-12" style="margin: 0 auto; text-align:center;">
            <input style="width: 100%;" id="newColor" />
            <button onclick="AddNewColor()" class="btn btn-primary">Add</button>
        </div>
        <div class="col-lg-12">
            <div class="form-group col-lg-12">
                <div class="col-md-12">
                    <div class="color-set-input col-lg-12">
                        <ul id="set-of-colors"></ul>
                    </div>
                </div>
            </div>
        </div>

    </div>


    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="col-lg-6">
            <div class="form-group col-lg-12">
                <div class="col-md-10">
                    <h3>List Name</h3>
                    @Html.EditorFor(model => model.mName, new { htmlAttributes = new { @class = "form-control" } })
                </div>
            </div>

            @if(ViewBag.errMessages != null && ViewBag.errMessages.Length > 0)
            {
                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                    @foreach(string errMsg in ViewBag.errMessages)
                    {
                        <p class="text-danger">@errMsg</p>
                    }
                </div>
            }
            
            <div class="col-lg-12" style="margin: 4vh 0;">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
    
            <div class="col-lg-12">
                @Html.ActionLink("Back to List", "Index")
            </div>
        </div>

        @Html.EditorFor(model => model.options, new { htmlAttributes = new { @class = "form-control", @id = "res", @style = "display: none;" } })

    }

</div>

@section Scripts
{
    <script>
        function AddNewColor() {
            var newColor = document.getElementById('newColor');

            //Is Null or Whitespace
            if (!(/\S/.test(newColor.value))) {
                newColor.value = "";
                return;
            }

            var existingColors = document.getElementById('res').value;

            document.getElementById('res').value = !(/\S/.test(existingColors))
                ? (newColor.value)
                : (existingColors + "," + newColor.value);

            newColor.value = "";

            RenderColorList();
        }

        function RenderColorList() {
            var colorList = document.getElementById('set-of-colors');
            colorList.innerHTML = "";

            var colorsChosen = document.getElementById('res').value.split(',');

            for (let i = 0; i < colorsChosen.length; i++) {
                if (colorsChosen[i] === "") { continue; }

                var newBtn = document.createElement("BUTTON");
                newBtn.classList.add("btn", "btn-danger");
                newBtn.style.marginLeft = "2rem";
                newBtn.innerHTML = "Remove";

                newBtn.onclick = function () {
                    DeleteElement(colorsChosen[i]);
                }

                var newLi = document.createElement("li");
                newLi.style.width = '100%';

                newLi.appendChild(document.createTextNode(colorsChosen[i]));
                newLi.appendChild(newBtn);

                colorList.appendChild(newLi);
            }
        }

        function DeleteElement(valToDelete) {
            var existingColors = document.getElementById('res').value.split(',');
            var indexToDelete = existingColors.indexOf(valToDelete);

            existingColors.splice(indexToDelete, 1);
            document.getElementById('res').value = existingColors;

            RenderColorList();
        }

        RenderColorList();
    </script>
}