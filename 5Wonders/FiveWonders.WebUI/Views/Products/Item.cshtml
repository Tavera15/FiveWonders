@model FiveWonders.core.ViewModels.ProductOrderViewModel

@{
    string[] imageFiles = Model.product.mImage.Split(',');
    string firstImage = imageFiles[0];
    string todaysDate = DateTime.Now.ToString("MM-dd-yyyy");
}

<div id="item-page">
    <div class="col-lg-7 col-md-12 col-sm-12 col-xs-12" style="padding: 0;">
        <div id="myCarousel" class="carousel slide" data-ride="carousel">
            <!-- Indicators -->
            <ol class="carousel-indicators">
                @for (int i = 0; i < imageFiles.Length; i++)
                {
                    string liClassTag = i == 0 ? "active" : "";

                    <li data-target="#myCarousel" data-slide-to="@i" class="@liClassTag"></li>
                }
            </ol>

            <!-- Wrapper for slides -->
            <div class="carousel-inner" role="listbox">
                @for (int i = 0; i < imageFiles.Length; i++)
                {
                    string itemClassTag = i == 0 ? "item active" : "item";

                    <div class="@itemClassTag img-test" style="background-image: url(@Url.Content("~/Content/ProductImages/" + @imageFiles[i]));"></div>
                }
            </div>

            <!-- Left and right controls -->
            <a class="left carousel-control" href="#myCarousel" role="button" data-slide="prev">
                <span class="glyphicon glyphicon-chevron-left" aria-hidden="true"></span>
                <span class="sr-only">Previous</span>
            </a>
            <a class="right carousel-control" href="#myCarousel" role="button" data-slide="next">
                <span class="glyphicon glyphicon-chevron-right" aria-hidden="true"></span>
                <span class="sr-only">Next</span>
            </a>
        </div>
    </div>

    <div class="col-lg-5 col-md-12 col-sm-12 col-xs-12 item-data-container">

        <div class="item-data">
            <h1 class="item-data-name">@Model.product.mName</h1>
            <h3 class="item-data-price">$@Model.product.mPrice</h3>

            <div class="item-data-form">

                @using (Html.BeginForm())
                {
                    @Html.AntiForgeryToken()


                    if (Model.sizeChart != null)
                    {
                        <div class="form-group">

                            @Html.LabelFor(model => (model.productOrder.mSize), htmlAttributes: new { @class = "control-label col-md-2" })
                            @Html.DropDownListFor(model => model.productOrder.mSize, new SelectList(Model.sizeChart.mSizesToDisplay.Split(',')), new { htmlAttributes = new { } })
                            @Html.ValidationMessageFor(model => model.productOrder.mSize, "", new { @class = "text-danger" })
                        </div>

                        <a href="@Url.Action("SizeChart", "Products", new {Id = Model.product.mID })" rel="noopener noreferrer" target="_blank">(View Size Chart)</a>
                    }

                    if (Model.product.isTextCustomizable || Model.product.isNumberCustomizable || Model.product.isDateCustomizable || Model.product.isTimeCustomizable)
                    {
                        <div class="ip-customization-container">

                            @if (Model.product.isTextCustomizable)
                            {
                                <div class="form-group">
                                    <label class="control-label col-md-2">@Model.product.mCustomText</label>
                                    @Html.EditorFor(model => model.productOrder.mCustomText, "", new { htmlAttributes = new { placeholder = "Recipient Name" } })
                                </div>
                            }

                            @if (Model.product.isNumberCustomizable)
                            {
                                <div class="form-group">
                                    <label class="control-label col-md-2">Custom Number:</label>
                                    @Html.EditorFor(model => model.productOrder.mCustomNum, new { htmlAttributes = new { @type = "number", @min = "0", @step = "1", @value = "0", placeholder = "0" } })
                                </div>
                            }

                            @if (Model.product.isDateCustomizable)
                            {
                                <div class="form-group">
                                    <label class="control-label col-md-2">Custom Date:</label>
                                    <input name="productOrder.customDate" value="@Model.productOrder.customDate" />
                                </div>
                            }

                            @if (Model.product.isTimeCustomizable)
                            {
                                <div class="form-group">
                                    <label class="control-label col-md-2">Custom Time:</label>
                                    @Html.EditorFor(model => model.productOrder.customTime, "", new { htmlAttributes = new { @placeholder = "ie. 04:00" } })
                                    <div class="col-md-10">
                                        @Html.ValidationMessageFor(model => model.productOrder.customTime, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            }
                        </div>
                    }

                    <div class="form-group">
                        @Html.LabelFor(model => model.productOrder.mQuantity, htmlAttributes: new { @class = "control-label col-md-2" })
                        @Html.EditorFor(model => model.productOrder.mQuantity, new { htmlAttributes = new { @type = "number", @min = "1", @step = "1", @value = "1" } })
                        @Html.ValidationMessageFor(model => model.productOrder.mQuantity, "", new { @class = "text-danger" })
                    </div>

                    <div class="ip-add-to-cart-btn-container">
                        <input type="submit" value="Add to Cart" class="btn btn-primary ip-add-to-cart-btn" />
                    </div>

                    if (!String.IsNullOrWhiteSpace(Model.product.mHtmlDesc))
                    {
                        <div class="col-lg-12 col-md-12 col-sm-12 item-data-desc-container">
                            <h3 style="font-weight: bold;">Description</h3>
                            <div class="item-data-tiny">
                                @Html.Raw(Model.product.mHtmlDesc)
                            </div>
                        </div>
                    }
                }

            </div>
        </div>
    </div>

</div>

@section Scripts {
    <!-- Include jQuery -->
    <script type="text/javascript" src="https://code.jquery.com/jquery-1.11.3.min.js"></script>

    <!-- Include Date Range Picker -->
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.4.1/js/bootstrap-datepicker.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.4.1/css/bootstrap-datepicker3.css" />


    <script>
        $(document).ready(function () {
            var date_input = $('input[name="productOrder.customDate"]'); //our date input has the name "date"
            var options = {
                format: 'mm/dd/yyyy',
                container: 'body',
                todayHighlight: true,
                autoclose: true,
                todayBtn: true,
            };
            date_input.datepicker(options);
        })
    </script>
}

@section Pagecss
{
    <link href="~/Content/5WondersCss/ItemPage.css"
          rel="stylesheet" type="text/css" />
}